package com.railway.bookingservice.service;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.railway.bookingservice.client.PassengerServiceClient;
import com.railway.bookingservice.client.TrainServiceClient;
import com.railway.bookingservice.dto.BookingRequestDTO;
import com.railway.bookingservice.dto.BookingResponseDTO;
import com.railway.bookingservice.dto.PassengerDTO;
import com.railway.bookingservice.dto.TrainDTO;
import com.railway.bookingservice.dto.WaitingListResponseDTO;
import com.railway.bookingservice.entity.Booking;
import com.railway.bookingservice.entity.WaitingList;
import com.railway.bookingservice.repository.BookingRepository;
import com.railway.bookingservice.repository.WaitingListRepository;

@Service
public class BookingServiceImpl implements BookingService {

    private final TrainServiceClient trainServiceClient;
    private final PassengerServiceClient passengerServiceClient;
    private final BookingRepository bookingRepository;
    @Autowired
    private WaitingListRepository waitingListRepository;

    @Autowired
    public BookingServiceImpl(TrainServiceClient trainServiceClient, PassengerServiceClient passengerServiceClient, BookingRepository bookingRepository) {
        this.trainServiceClient = trainServiceClient;
        this.passengerServiceClient = passengerServiceClient;
        this.bookingRepository = bookingRepository;
    }

//    @Transactional
//    @Override
//    public BookingResponseDTO bookTicket(BookingRequestDTO request) {
//        // Fetch train details
//        TrainDTO train = trainServiceClient.getTrainById(request.getTrainId());
//
//        // Check seat availability
//        if (train.getAvailableSeats() < request.getNumberOfSeats()) {
//            throw new RuntimeException("Not enough seats available!");
//        }
//
//        // Fetch or create passenger
//        PassengerDTO passenger = passengerServiceClient.getPassengerById(request.getPassengerId());
//        if (passenger == null) {
//            throw new RuntimeException("Passenger not found!");
//        }
//
//        // Calculate total fare
//        double totalFare = train.getFare() * request.getNumberOfSeats();
//
//        // Create booking
//        Booking booking = Booking.builder()
//                .passengerId(passenger.getId())
//                .trainId(train.getId())
//                .numberOfSeats(request.getNumberOfSeats())
//                .fare(totalFare)
//                .status("CONFIRMED")
//                .bookingTime(LocalDateTime.now())
//                .build();
//        bookingRepository.save(booking);
//
//        // Update available seats in Train Service
//        trainServiceClient.updateSeats(train.getTrainNumber(), train.getDepartureDate(), request.getNumberOfSeats());
//
//        return new BookingResponseDTO(booking.getId(), booking.getStatus(), totalFare);
//    }
    
    @Transactional
    @Override
    public BookingResponseDTO bookTicket(BookingRequestDTO request) {
        Long trainId = request.getTrainId();
        Long passengerId = request.getPassengerId();
        int requestedSeats = request.getNumberOfSeats();

        // Fetch train details
        TrainDTO train = trainServiceClient.getTrainById(trainId);
        LocalDate journeyDate = train.getDepartureDate();
        String trainNumber = train.getTrainNumber();
        double seatFare = train.getFare();

        // Calculate total fare
        double totalFare = requestedSeats * seatFare;

        // Check available seats
        int availableSeats = train.getAvailableSeats();

        if (availableSeats >= requestedSeats) {
            // Book the ticket normally as CONFIRMED
            trainServiceClient.updateSeats(trainNumber, journeyDate, requestedSeats);

            Booking booking = Booking.builder()
                    .trainId(trainId)
                    .passengerId(passengerId)
                    .numberOfSeats(requestedSeats)
                    .status("CONFIRMED")
                    .fare(totalFare)
                    .bookingTime(LocalDateTime.now())
                    .build();

            bookingRepository.save(booking);

            return BookingResponseDTO.builder()
                    .bookingId(booking.getId())
                    .status(booking.getStatus())
                    .totalFare(booking.getFare())
                    .passengerId(passengerId)
                    .build();
        } else {
            // Count existing waitlisted bookings for this train & date
            long waitlistCount = bookingRepository.findAll().stream()
                    .filter(b -> {
                        TrainDTO bTrain = trainServiceClient.getTrainById(b.getTrainId());
                        return b.getStatus().startsWith("WAITING") &&
                               bTrain.getTrainNumber().equals(trainNumber) &&
                               bTrain.getDepartureDate().isEqual(journeyDate);
                    }).count();

            int waitingNumber = (int) waitlistCount + 1;

            // Save waitlisted booking
            Booking booking = Booking.builder()
                    .trainId(trainId)
                    .passengerId(passengerId)
                    .numberOfSeats(requestedSeats)
                    .status("WAITING - WL" + waitingNumber)
                    .fare(totalFare)
                    .bookingTime(LocalDateTime.now())
                    .build();

            bookingRepository.save(booking);

            return BookingResponseDTO.builder()
                    .bookingId(booking.getId())
                    .status(booking.getStatus())
                    .totalFare(booking.getFare())
                    .passengerId(passengerId)
                    .build();
        }
    }




    @Override
    public BookingResponseDTO getBookingById(Long bookingId) {
        Booking booking = bookingRepository.findById(bookingId)
                .orElseThrow(() -> new RuntimeException("Booking not found!"));
        return new BookingResponseDTO(booking.getId(), booking.getStatus(), booking.getFare(),booking.getPassengerId());
    }

    @Override
    public List<BookingResponseDTO> getAllBookings() {
        return bookingRepository.findAll().stream()
                .map(booking -> new BookingResponseDTO(booking.getId(), booking.getStatus(), booking.getFare(), booking.getPassengerId()))
                .collect(Collectors.toList());
    }

    @Transactional
    @Override
    public BookingResponseDTO updateBooking(Long bookingId, BookingRequestDTO request) {
        Booking booking = bookingRepository.findById(bookingId)
                .orElseThrow(() -> new RuntimeException("Booking not found!"));

        // Fetch train details
        TrainDTO train = trainServiceClient.getTrainById(request.getTrainId());

        // Check if enough seats are available
        if (train.getAvailableSeats() + booking.getNumberOfSeats() < request.getNumberOfSeats()) {
            throw new RuntimeException("Not enough seats available for update!");
        }

        // Update train seats
        trainServiceClient.updateSeats(train.getTrainNumber(), LocalDate.now(), request.getNumberOfSeats() - booking.getNumberOfSeats());

        // Update booking details
        booking.setTrainId(train.getId());
        booking.setNumberOfSeats(request.getNumberOfSeats());
        booking.setFare(train.getFare() * request.getNumberOfSeats());
        bookingRepository.save(booking);

        return new BookingResponseDTO(booking.getId(), booking.getStatus(), booking.getFare(), booking.getPassengerId());
    }

    @Transactional
    @Override
    public void cancelBooking(Long bookingId) {
        Booking booking = bookingRepository.findById(bookingId)
                .orElseThrow(() -> new RuntimeException("Booking not found!"));

        // Refund seats to Train Service
        TrainDTO train = trainServiceClient.getTrainById(booking.getTrainId());
        trainServiceClient.updateSeats(train.getTrainNumber(), LocalDate.now(), -booking.getNumberOfSeats());

        // Delete booking
        bookingRepository.delete(booking);
    }
    
    @Override
    public List<BookingResponseDTO> getAllWaitingListBookings() {
        List<Booking> waitingBookings = bookingRepository.findAll().stream()
                .filter(booking -> booking.getStatus() != null && booking.getStatus().startsWith("WAITING"))
                .collect(Collectors.toList());

        return waitingBookings.stream().map(booking -> BookingResponseDTO.builder()
                .bookingId(booking.getId())
                .status(booking.getStatus())
                .totalFare(booking.getFare())
                .passengerId(booking.getPassengerId())
                .build()
        ).collect(Collectors.toList());
    }

}
